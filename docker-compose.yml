version: '3.3'

services:
  db_node_01:
    build:
      context: docker/mariadb
      dockerfile: Dockerfile
    container_name: db_node_01
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: archdb
      MYSQL_USER: stud
      MYSQL_PASSWORD: stud
      MYSQL_ROOT_PASSWORD: '1'
    command: >
      --sql-mode='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'
      --general-log=ON
      --log-queries-not-using-indexes=ON
    networks:
      - arch-network
    ports:
      - 3360:3306
    healthcheck:
      test: "/usr/bin/mysql --host=db_node_01 --database=archdb --user=stud --password=stud --execute \"SHOW DATABASES;\""
      timeout: 5s
      retries: 5
    # volumes:
    #   - ./mariadb/rollout/user:/docker-entrypoint-initdb.d
      # - db-node-01-data:/var/lib/mysql

  db_node_02:
    build:
      context: docker/mariadb
      dockerfile: Dockerfile
    container_name: db_node_02
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: archdb
      MYSQL_USER: stud
      MYSQL_PASSWORD: stud
      MYSQL_ROOT_PASSWORD: '1'
    command: >
      --sql-mode='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'
      --general-log=ON
      --log-queries-not-using-indexes=ON
    networks:
      - arch-network
    ports:
      - 3361:3306
    healthcheck:
      test: "/usr/bin/mysql --host=db_node_02 --database=archdb --user=stud --password=stud --execute \"SHOW DATABASES;\""
      timeout: 5s
      retries: 5
    # volumes:
    #   - ./mariadb/rollout/user:/docker-entrypoint-initdb.d
      # - db-node-02-data:/var/lib/mysql

# sequences
  db_node_03:
    build:
      context: docker/mariadb
      dockerfile: Dockerfile
    container_name: db_node_03
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: archdb
      MYSQL_USER: stud
      MYSQL_PASSWORD: stud
      MYSQL_ROOT_PASSWORD: '1'
    command: >
      --sql-mode='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'
      --general-log=ON
      --log-queries-not-using-indexes=ON
    networks:
      - arch-network
    ports:
      - 3362:3306
    healthcheck:
      test: "/usr/bin/mysql --host=db_node_03 --database=archdb --user=stud --password=stud --execute \"SHOW DATABASES;\""
      timeout: 5s
      retries: 5
    # volumes:
    #   - ./mariadb/rollout/sequence:/docker-entrypoint-initdb.d
      # - db-node-03-data:/var/lib/mysql

  proxysql:
    build:
      context: docker/proxysql
      dockerfile: Dockerfile
    container_name: proxysql
    # command: >
    #   --initial
    # volumes:
    #   - proxysql-data:/var/lib/proxysql
    healthcheck:
      test: "/usr/bin/mariadb --user=stud --password=stud --execute \"SHOW DATABASES;\""
      timeout: 20s
      retries: 5
    depends_on:
      - db_node_01
      - db_node_02
      - db_node_03
    networks:
      - arch-network
    ports:
      # Mysql Client Port
      - "6033:6033"
      # Mysql Admin Port
      - "6032:6032"

  kafka1:
    image: 'bitnami/kafka:latest'
    container_name: kafka1
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka1:9092"
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_KRAFT_CLUSTER_ID: "dh6khitPSDGZSBOjNeTC_g"
    volumes:
      - kafka_volume1:/bitnami/kafka
    networks:
      - arch-network
    healthcheck:
    # хака, не получилось сделать нормальный healthcheck
      test: "ls" 
      start_period: 10s

  kafka2:
    image: 'bitnami/kafka:latest'
    container_name: kafka2
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka2:9092"
      KAFKA_BROKER_ID: 2
      KAFKA_CFG_NODE_ID: 2
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_KRAFT_CLUSTER_ID: "dh6khitPSDGZSBOjNeTC_g"
    volumes:
      - kafka_volume2:/bitnami/kafka
    networks:
      - arch-network
    healthcheck:
      test: "ls"
      start_period: 10s

  user_service:
    build:
      context: .
      dockerfile: docker/user_service/Dockerfile
    container_name: user_service
    environment:
      - DB_HOST=proxysql
      - DB_PORT=6033
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=archdb
      - CACHE_HOST=cache
      - CACHE_PORT=6379
      - QUEUE_HOST=kafka1:9092
      - QUEUE_TOPIC=event_server
      - QUEUE_GROUP_ID=0
    ports:
      - 8080:8080
    networks:
      arch-network:
        ipv4_address: 192.168.55.2
    depends_on:
      proxysql:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy

  event_listener:
    build:
      context: .
      dockerfile: docker/event_listener/Dockerfile
    container_name: event_listener
    environment:
      - DB_HOST=proxysql
      - DB_PORT=6033
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=archdb
      - CACHE_HOST=cache
      - CACHE_PORT=6379
      - QUEUE_HOST=kafka1:9092
      - QUEUE_TOPIC=event_server
      - QUEUE_GROUP_ID=0
    networks:
      - arch-network
    depends_on:
      proxysql:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy

  cache:
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning 
    networks:
      - arch-network
    volumes: 
      - cache:/data

  package_service:
    build:
      context: .
      dockerfile: docker/package_service/Dockerfile
    container_name: package_service
    environment:
      - DB_HOST=proxysql
      - DB_PORT=6033
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=archdb
      - QUEUE_HOST=kafka1:9092
      - QUEUE_TOPIC=event_server
      - QUEUE_GROUP_ID=0
    ports:
      - 8082:8082
    networks:
      arch-network:
        ipv4_address: 192.168.55.3
    depends_on:
      proxysql:
        condition: service_healthy

  delivery_service:
    build:
      context: .
      dockerfile: docker/delivery_service/Dockerfile
    container_name: delivery_service
    environment:
      - DB_HOST=proxysql
      - DB_PORT=6033
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=archdb
      - QUEUE_HOST=kafka1:9092
      - QUEUE_TOPIC=event_server
      - QUEUE_GROUP_ID=0
    ports:
      - 8081:8081
    networks:
      arch-network:
        ipv4_address: 192.168.55.4
    depends_on:
      proxysql:
        condition: service_healthy

volumes:
  db-node-01-data:
  db-node-02-data:
  db-node-03-data:
  proxysql-data:
  cache:
  kafka_volume1:
  kafka_volume2:

networks:
  arch-network:
    driver: "bridge"
    ipam:
      config:
        - subnet: 192.168.55.0/16